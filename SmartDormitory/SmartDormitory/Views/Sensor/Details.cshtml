@{
    ViewData["Title"] = "Details";
}

@model SmartDormitory.Web.Models.SensorDetailsViewModel

<h2>Details</h2>

<br />

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<div class="container shadow p-3 mb-5 bg-light rounded">
    <div class="d-flex justify-content-center">
        <p>SENSOR INFO</p>
    </div>
    <ul class="list-group">
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <!--Шабан, ето тук съм ти сложил мазничкия сензор-метър-->
            <div id="jg5" class="gauge size-3 center-horizontal"></div>
            <div class="h-split"></div>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Name: </strong>@Model.Name</span>
            @if (Model.Name == null)
            {
                <span class="badge badge-primary badge-pill">not set</span>
            }
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Description: </strong>@Model.Description</span>
            @if (string.IsNullOrEmpty(Model.Description))
            {
                <span class="badge badge-primary badge-pill">not set</span>
            }
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Polling Interval: </strong>@Model.PollingInterval</span>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Latitude: </strong>@Model.Latitude</span>
            @if (Model.Latitude == null)
            {
                <span class="badge badge-primary badge-pill">not set</span>
            }
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Longitude: </strong>@Model.Longitude</span>
            @if (Model.Longitude == null)
            {
                <span class="badge badge-primary badge-pill">not set</span>
            }
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Min Value: </strong>@Model.ValueRangeMin</span>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Max Value: </strong>@Model.ValueRangeMax</span>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span>
                <strong>Alarm: </strong>
                <span>@Model.GetAlarmStatus()</span>
            </span>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span>
                <strong>Access level: </strong>
                @if (Model.IsPublic)
                {
                    <span>Public</span>
                }
                else
                {
                    <span>Private</span>
                }
            </span>
        </li>
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" type="button">
            <span><strong>Id:</strong> @Model.ID</span>
        </li>
    </ul>
</div>

<script src="~/lib/justgage/raphael-2.1.4.min.js"></script>
<script src="~/lib/justgage/justgage.js"></script>
<script>

    function myPeriodicMethod() {

        $.ajax({
            url: "/Sensor/GetNewValue/@Model.ID",
            success: function (data) {
                update(parseFloat(data.value))
            },
            complete: function () {
                setTimeout(myPeriodicMethod, 2000);
            }
  });
}

    setTimeout(myPeriodicMethod, 2000);

</script>
<script>
    addJustGade()

    var jg5;
    function addJustGade() {
        
    document.addEventListener("DOMContentLoaded", function (event) {
    var value = @Model.Value
        @if (Model.Value.ToString().Equals("true"))
        {
            Model.Value = "1";
            Model.ValueRangeMin = 0;
            Model.ValueRangeMax = 1;
        }
        else if (Model.Value.ToString().Equals("false"))
        {
            Model.Value = "0";
            Model.ValueRangeMin = 0;
            Model.ValueRangeMax = 1;
        }
        var defs2 = {
            label: "label",
            value: @Model.Value,
            min: @Model.ValueRangeMin,
            max: @Model.ValueRangeMax,
            decimals: 1,
            gaugeWidthScale: 0.6,
            pointer: true,
            pointerOptions: {
                toplength: 5,
                bottomlength: 15,
                bottomwidth: 2
            },
            counter: true,
            relativeGaugeSize: true
        }

        jg5 = new JustGage({
            id: "jg5",
            defaults: defs2
        });
        });
    }

    function update(val) {
        console.log("called with " + val)
        jg5.refresh(val);
    }
</script>